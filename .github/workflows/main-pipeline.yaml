name: tag docker image with Git

on:
  push:
    branches:
      - staging

env:
  IMAGE_NAME: swipex

jobs:
  build:
    name: build api server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Build the Go application
        run: go build -ldflags="-s -w" -o ./bin/exe ./cmd

      - name: Remove binaries
        run: rm -rf bin

  test-common:
    needs: [build]
    name: unit test common
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Download package dependencies
        run: go mod download

      - name: Unit test - common
        run: go test -v ./testing/common

  test-classify:
    needs: [build]
    name: unit test classify module
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Download package dependencies
        run: go mod download

      - name: Unit test - classify
        run: go test -v ./testing/classify

  test-products:
    needs: [build]
    name: unit test products module
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Download package dependencies
        run: go mod download

      - name: Unit test - products
        run: go test -v ./testing/products

  test-article:
    needs: [build]
    name: unit test article module
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Unit test - article
        run: go test -v ./testing/article

  build-docker:
    needs: [test-common, test-classify, test-products, test-article]
    name: build docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get commit ID
        id: commit_id
        run: echo "COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.commit_id.outputs.COMMIT_ID }} .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.commit_id.outputs.COMMIT_ID }}

      - name: Rename Docker image
        run: docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.commit_id.outputs.COMMIT_ID }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Image latest
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Logout from Docker Hub
        run: docker logout
