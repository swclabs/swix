// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/vnpay.proto

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VNPay_CheckStatus_FullMethodName          = "/payment.VNPay/CheckStatus"
	VNPay_ProcessPayment_FullMethodName       = "/payment.VNPay/ProcessPayment"
	VNPay_ProcessPaymentReturn_FullMethodName = "/payment.VNPay/ProcessPaymentReturn"
)

// VNPayClient is the client API for VNPay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Định nghĩa dịch vụ PaymentService
type VNPayClient interface {
	CheckStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ProcessPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	ProcessPaymentReturn(ctx context.Context, in *PaymentReturnRequest, opts ...grpc.CallOption) (*PaymentReturnResponse, error)
}

type vNPayClient struct {
	cc grpc.ClientConnInterface
}

func NewVNPayClient(cc grpc.ClientConnInterface) VNPayClient {
	return &vNPayClient{cc}
}

func (c *vNPayClient) CheckStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, VNPay_CheckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vNPayClient) ProcessPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, VNPay_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vNPayClient) ProcessPaymentReturn(ctx context.Context, in *PaymentReturnRequest, opts ...grpc.CallOption) (*PaymentReturnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentReturnResponse)
	err := c.cc.Invoke(ctx, VNPay_ProcessPaymentReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VNPayServer is the server API for VNPay service.
// All implementations must embed UnimplementedVNPayServer
// for forward compatibility.
//
// Định nghĩa dịch vụ PaymentService
type VNPayServer interface {
	CheckStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	ProcessPayment(context.Context, *PaymentRequest) (*PaymentResponse, error)
	ProcessPaymentReturn(context.Context, *PaymentReturnRequest) (*PaymentReturnResponse, error)
	mustEmbedUnimplementedVNPayServer()
}

// UnimplementedVNPayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVNPayServer struct{}

func (UnimplementedVNPayServer) CheckStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedVNPayServer) ProcessPayment(context.Context, *PaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedVNPayServer) ProcessPaymentReturn(context.Context, *PaymentReturnRequest) (*PaymentReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPaymentReturn not implemented")
}
func (UnimplementedVNPayServer) mustEmbedUnimplementedVNPayServer() {}
func (UnimplementedVNPayServer) testEmbeddedByValue()               {}

// UnsafeVNPayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VNPayServer will
// result in compilation errors.
type UnsafeVNPayServer interface {
	mustEmbedUnimplementedVNPayServer()
}

func RegisterVNPayServer(s grpc.ServiceRegistrar, srv VNPayServer) {
	// If the following call pancis, it indicates UnimplementedVNPayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VNPay_ServiceDesc, srv)
}

func _VNPay_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VNPayServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VNPay_CheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VNPayServer).CheckStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VNPay_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VNPayServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VNPay_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VNPayServer).ProcessPayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VNPay_ProcessPaymentReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VNPayServer).ProcessPaymentReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VNPay_ProcessPaymentReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VNPayServer).ProcessPaymentReturn(ctx, req.(*PaymentReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VNPay_ServiceDesc is the grpc.ServiceDesc for VNPay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VNPay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.VNPay",
	HandlerType: (*VNPayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckStatus",
			Handler:    _VNPay_CheckStatus_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _VNPay_ProcessPayment_Handler,
		},
		{
			MethodName: "ProcessPaymentReturn",
			Handler:    _VNPay_ProcessPaymentReturn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vnpay.proto",
}
